Module LightDMS
{
	Entity Checkout
	{
		Logging { AllProperties; }

		Reference Repository LightDMS.DocumentRepository; 
		Guid DocumentID;
		Reference CreatedBy Common.Principal { CreatedBy; SystemRequired; DenyUserEdit; }
		DateTime CreatedDate { CreationTime; SystemRequired; DenyUserEdit; }
		LongString Comment;

		Is LightDMS.DocumentEvent;
		
		SaveMethod
		{
			Initialization 'DeadlockPrevention' <DeadlockPrevention.cssnippet>;
		}

		ComposableFilterBy MultipleDocumentCheckout
		'(items, repository, filterParameter) =>
		{
            var itemsToCheck = items.Select(i => i.ID).ToList();
    		var invalidItems = repository.LightDMS.DocumentStatusBeforeEvent.Query(i => itemsToCheck.Contains(i.ID) && i.CheckoutID != null).Select(i => i.ID).ToList();
    		return items.Where(i => invalidItems.Contains(i.ID));
	  	}';
		InvalidData MultipleDocumentCheckout 'It is not allowed to check out the document content for editing, because it is already checked out.';
		
		ComposableFilterBy NullDocumentCheckout 
		'(items, repository, filterParameter) =>
		{
			var itemsToCheck = items.Select(a => a.DocumentID).ToList();
            var validItems = repository.LightDMS.DocumentVersion.Query(i => itemsToCheck.Contains(i.DocumentID)).Select(i => i.DocumentID).ToList();
            return items.Where(i => !validItems.Contains(i.DocumentID));
	  	}';
		InvalidData NullDocumentCheckout 'It is not allowed to check out the document content for editing, because this document has no content available in the system.';
	}

	Parameter MultipleDocumentCheckout;
	Parameter NullDocumentCheckout;
}